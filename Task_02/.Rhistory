library(swirl)
swirl()
swirl()
getwd()
ls()
x<-9
ls()
dir()
?list.files
args()
args(list.files())
args(list.files)
old.dir<-
dir()
old.dir<-getwd()
dir.create(testdir)
dir.create(getwd)
dir.create()
dir.create(testdir)
dir.create(dir)
testdir(dir.create)
dir.create(getwd())
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists()
file.exists("mytest.R")
files.info("mytest.R")
files.info()
files.info(mytest.R)
file.infor("mytest.R")
file.info("mytest.R")
file.rename("mytest.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.
lf)
file.rename("mytest.R" to"mytest2.R")
file.rename("mytest.R" to"mytest2.R")
mytest.R file.rename("mytest2.R")
file.rename("mytest.R"to"mytest2.R")
file.rename("mytest.R""mytest2.R")
file.rename("mytest2.R"
)
file.rename("mytest.R to mytest2.R")
file.rename("mytest.R"to"mytest2.R")
file.rename("mytest.R"to"mytest2.R")
file.rename("mytest.R"to"mytest2.R")
$file.rename("mytest2.R")
file.info("mytest.R")$file.rename("mytest2.R")
file.info("mytest.R")$modefile.rename("mytest2.R")
$"mytest.R"file.rename("mytest2.R")
"mytest.R"file.rename("mytest2.R")
file.rename()
file.rename("mytest.R")
file.rename("mytest.R""mytest2.R")
file.rename("mytest.R to mytest2.R")
file.info("mytest.R")$mode 
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create("testdir2
"file.path("testdir3"))
dir.create("testdir2")
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd()
setwd(dir)
setwd(testdir)
setwd(old.dir)
1:20
pi:10
15:1
`:`
info(`:`)
?(`:`)
?`:`
seq(1'20)
d
.e
seq(1,20)
seq(1, 20)
:
?,:,
?':'
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq<- seq(5, 10, length=30)
my_seq<- seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x<- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(3rd, 5th, 7th)
?
c()
x = c(3rd, 5th, 7th)
x[c(3rd, 5th, 7th)]
c(3, 5 , 7)
x[c(3, 5 , 7)]
x (i.e. x[0])
x (1 x[0])
x [1, 2, ..., 40}
x [1, 2, ..., 40]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
arg(vect)
args(vect)
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
matrix(?)
info()
info(matrix)
?`matrix()`
?matrix
my_matrix2 <- matrix(4, 5)
my_matrix2 <- matrix(1:20)
my_matrix2 <- matrix(my_vector)
my_matrix2 <- matrix(my_matrix)
my_matrix2 <- matrix(my_vector)
my_matrix2 <- matrix(1:20, 4 rows, 5 columns)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- Bill, Gina, Kelly, Sean
patients <- c(Bill, Gina, Kelly, Sean)
patients <- [Bill, Gina, Kelly, Sean]
patients <- "Bill, Gina, Kelly, Sean"
patients <- "Bill, "Gina", "Kelly", "Sean"
patients <- "Bill, "Gina", "Kelly", "Sean"
patients <- "Bill", "Gina", "Kelly", "Sean"
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind("patients", "my_vector")
cbind("patients", "my_matrix")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patients", "age", "weight", "bp", "rating", "test"
)
cnames <- c("patients", "age", "weight", "bp", "rating", "test")
cnames <- c("patients", "age", "weight", "bp", "rating", "test")
cnames <-c("patients", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
==
`==`
"=="
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 !TRUE 7
!TRUE
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
<- sample(10)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints >= 0)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
q()
submit()
boring_function('My first function!')
boring_function
submit()
q()
setwd("C:\\Users\\burde\\Desktop\\Evolution\\Tasks\\Task_02")
Data<-read.csv("http://jonsmitchell.com/data/beren.csv",stringsAsFactors=F)
Data
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(Data)
Data[1,]
Data[2,]
Data[1:3,]
Data[1:3, 4]
Data[1:5, 1:3]
beren<-Data
Feeds<-which(beren[,9]=="bottle")
berenMilk<-beren[Feeds,]
head(berenMilk)
Feeds<-which(beren[,"event"]=="bottle")
Feeds<-which(beren$event=="bottle")
dayID<-apply(beren,1,function(x)paste(x[1:3],collapse="-"))
dateID<-sapply(dayID,as.Date,format="%Y-%m-%d",origin="2019-04-18")
beren$age<-dateID-dateID[which(beren$event=="birth")]
head(beren)
beren2<-beren
beren3<-beren2[order(beren2$age),]
head(beren)
head(beren2)
head(beren3)
write.csv(beren3,"beren_new.csv",quote=F,row.names=FALSE)
#Question1: The first Hypothesis values dont correspond, the second hypothesis relationship is to vague.
setwd()
beren3 <- read.csv("beren_new.csv", stringsAsFactor=F)
Feeds<-which(beren3$event=="bottle")
avgMilk<-mean(beren3$value[Feeds])
avgFeeds<-tapply(beren3$value[Feeds],beren3$age[Feeds],mean)
avgFeeds
varFeed<-tapply(beren3$value[Feeds],beren3$age[Feeds],var)
totalFeed<-tapply(beren3$value[Feeds],beren3$age[Feeds],sum)
numFeeds<-tapply(beren3$value[Feeds],beren3$age[Feeds],length)
cor(beren3$value[Feeds],beren3$age[Feeds])
cor.test(beren3$value[Feeds],beren3$age[Feeds])
berenCor<-cor.test(beren3$value[Feeds],beren3$age[Feeds])
berenCor
berenANOVA<-aov(beren3$value[Feeds]~beren3$caregiver[Feeds])
boxplot(beren3$value[Feeds]~beren3$caregiver[Feeds],xlab="who gave the bottle", ylab="amount of milk consumed (oz)")
par(las=1,mar=c(5,5,1,1),mgp=c(2,0.5,0),tck=-0.01)
plot(as.numeric(names(totalFeed)),totalFeed,type="b",pch=16,xlab="age in days",ylab="ounces of milk")
abline(h=mean(totalFeed),lty=2,col='red')
pdf("r02b-totalMilkByDay.pdf",height=4,width=4)
par(las=1,mar=c(5,5,1,1),mgp=c(2,0.5,0),tck=-0.01)
plot(as.numeric(names(totalFeed)),totalFeed,type="b",pch=16,xlab="age in days",ylab="ounces of milk")
abline(h=mean(totalFeed),lty=2,col='red')
dev.off()
#question2: Because we dont have info on milk or not or frequency in daycare
unique(beren3$event)
27
28
swirl()
library(swirl)
swirl
swirl()
Sys.
Sys.Date()
mean
mean(c(2,4,5)
)
submit()
My first function
boring_function("My first function!")
boring_function 
q()
